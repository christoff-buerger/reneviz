<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
  xmlns:h="http://java.sun.com/jsf/html"
  xmlns:f="http://java.sun.com/jsf/core"
  xmlns:ui="http://java.sun.com/jsf/facelets"
  xmlns:p="http://primefaces.org/ui"
  xmlns:pe="http://primefaces.org/ui/extensions">

<h:head>
  <title>Reneviz</title>
</h:head>
<h:body id="renevizBody" onload="initbean()">

  <!--   <p:log />  -->

  <h:outputStylesheet name="css/components.css" />
  <h:outputStylesheet name="css/default.css" />

  <h:outputScript name="scripts/d3.v3.js" charset="utf-8" />

  <!-- <p:growl id="growl" showDetail="true" sticky="true" />  -->

  <h:form>

    <p:remoteCommand name="selectNode" action="#{result.selectNode}"
      update=":nodeDetailForm:selectionLabel :nodeDetailForm:selectionRDF :nodeDetailForm:nodeDetailTable
              :outputDiagramForm "
      oncomplete="if(args.update) {updateD3();}" immediate="true" />

    <p:remoteCommand name="initbean" action="#{query.init}"
      update=":queryForm:facetTable
              :outputDiagramForm
              :nodeDetailForm:selectionLabel :nodeDetailForm:selectionRDF :nodeDetailForm:nodeDetailTable"
      oncomplete="updateD3()" />
    <p:remoteCommand name="checkForTopicChange" action="#{query.init}"
      update=":queryForm:facetTable
              :outputDiagramForm
              :nodeDetailForm:selectionLabel :nodeDetailForm:selectionRDF :nodeDetailForm:nodeDetailTable"
      oncomplete="updateD3()" />
  </h:form>


  <p:layout id="pageLayout" fullPage="true">

    <p:layoutUnit id="queryLayoutUnit" position="west" size="350"
      header="Query" resizable="true" closable="false"
      collapsible="true">


      <h:form id="queryForm">

        <div id="topicDiv">
          <table style="width: 100%">
            <tr>
              <td>Search Topic:</td>
              <td style="width: 100%">
                <p:selectOneMenu id="selectTopicMenu" style="width:100%"
                  required="true" value="#{query.topic}"
                  converter="#{resourceConverter}">
                  <f:selectItems value="#{query.topics}" var="t"
                    itemLabel="#{t.localName}" />
                  <p:ajax event="change"
                    update="facetTable
                          :outputDiagramForm
                          :nodeDetailForm:selectionLabel :nodeDetailForm:selectionRDF :nodeDetailForm:nodeDetailTable"
                    global="false" oncomplete="checkForTopicChange()" />
                </p:selectOneMenu>
              </td>
            </tr>
          </table>


        </div>


        <p:dataTable id="facetTable" value="#{query.facets}" var="facet">
          <p:column headerText="facets">
            <div style="width: 100%">

              <p:panel header="#{facet.name}" toggleable="false"
                closable="false" toggleSpeed="500" closeSpeed="500">

                <p:ajax event="close"
                  listener="#{query.removeFacet(facet)}"
                  update="@parent:@parent" />

                <table style="width: 100%">
                  <tr>
                    <td style="width: 100%;">
                      <p:outputLabel value="is mandatory" />
                    </td>
                    <td>
                      <p:selectBooleanCheckbox
                        value="#{facet.mandatory}" />
                    </td>
                  </tr>
                  <tr>
                    <td style="width: 100%;">
                      <p:slider minValue="0" maxValue="100" step="1"
                        for="inputTextWeightFacet">
                        <p:ajax event="slideEnd" immediate="true"
                          listener="#{facet.onSlideEnd}" />
                      </p:slider>
                    </td>
                    <td>
                      <p:inputText id="inputTextWeightFacet"
                        value="#{facet.weight}" size="2"
                        converter="#{percentConverter}">

                      </p:inputText>
                    </td>
                  </tr>
                </table>

                <p:commandButton id="addConstraintButton"
                  actionListener="#{facet.addConstraint}"
                  update="@parent" value="add constraint"
                  immediate="true" style="width:100%" />

                <p:subTable id="constraintTable"
                  value="#{facet.constraints}" var="constraint">
                  <p:column>

                    <table style="width: 100%">
                      <tr>
                        <td colspan="2">the connecting resource</td>
                        <td>
                          <p:commandButton id="delete"
                            icon="ui-icon-trash"
                            title="delete constraint"
                            actionListener="#{facet.removeConstraint(constraint)}"
                            update="@parent:@parent:@parent" />
                        </td>
                      </tr>
                      <tr>
                        <td>
                          <p:selectOneMenu
                            value="#{constraint.expression}" id="cexpr"
                            disabled="#{constraint.ready}"
                            converter="#{filterExpressionConverter}">
                            <f:selectItems
                              value="#{constraint.expressions}"
                              var="expression"
                              itemLabel="#{expression.label}"
                              itemValue="#{expression}" />
                          </p:selectOneMenu>
                        </td>
                        <td>
                          <p:inputText id="cvalue"
                            value="#{constraint.value}"
                            disabled="#{constraint.ready}" size="12" />
                        </td>
                        <td>
                          <p:commandButton id="edit"
                            icon="ui-icon-pencil" title="edit"
                            actionListener="#{constraint.edit}"
                            onclick="jQuery(this).hide(); jQuery(this).next().show()"
                            style="display:none"
                            update="@parent:cvalue @parent:cexpr" />
                          <p:commandButton id="ok" icon="ui-icon-check"
                            title="apply changes"
                            actionListener="#{constraint.update}"
                            onclick="jQuery(this).hide(); jQuery(this).prev().show()"
                            update="@parent:cvalue @parent:cexpr" />
                        </td>
                      </tr>
                    </table>
                  </p:column>
                </p:subTable>
              </p:panel>
            </div>
          </p:column>
        </p:dataTable>

        <div id="queryDiv">
          <p:commandButton id="commandButtonQueryRun" value="Query"
            actionListener="#{query.executeQuery}"
            onclick="jQuery(this).addClass('ui-state-disabled').attr('disabled', 'disabled')"
            oncomplete="jQuery('#queryForm\\:commandButtonQueryRun').removeClass('ui-state-disabled').removeAttr('disabled');updateD3()"
            update=":outputDiagramForm
                     :nodeDetailForm:selectionLabel :nodeDetailForm:selectionRDF :nodeDetailForm:nodeDetailTable">

          </p:commandButton>
        </div>

      </h:form>


    </p:layoutUnit>

    <p:layoutUnit id="mainLayoutUnit" position="center">

      <p:layout>
        <p:layoutUnit id="outputLayoutUnit" position="center">

          <!-- <p:accordionPanel id="outputAccordionPanel" multiple="false">

            <p:tab title="d3.js Output"
              style="height: 500px; width: 100%"> -->

          <div id="outputDiagram" style="height: auto; width: 100%;" />

          <script>
                var width = jQuery("#outputDiagram").width();
                var height = Math.max(800,jQuery("#outputDiagram").height());
                var color = d3.scale.category10();
                var charge = -2000;
                
                var force = d3.layout.force()
                  .charge(charge)
                  .linkDistance(function(d) {
                                  return 20 + 200 * (1 - d.weight);
                                })
                  .size([width,height]);

                var svg = d3
                  .select("#outputDiagram")
                  .append("svg")
                //  .attr("width", width)
                //  .attr("height", height)
                  .attr("viewBox", '0,0,' + width + ',' + height)
                  .attr("pointer-events", "all")
                  .append('svg:g')
                  .call(d3.behavior.zoom().on("zoom", redraw))
                  .append('svg:g');



                
                svg
                  .append('svg:rect')
                  .attr('width', width)
                  .attr('height', height)
                  .attr('fill', 'white');

//                 svg.append("line")
//                 .attr("x1", force.size()[0]/2)
//                 .attr("y1", force.size()[1]/2)
//                 .attr("x2", force.size()[0])
//                 .attr("y2", force.size()[1]/2)
//                 .attr("class", "axis")

                function redraw() {
              	svg.attr("transform", "translate("
					+ d3.event.translate
					+ ")"
					+ " scale("
					+ d3.event.scale
					+ ")");
                }
                
              </script>
          <h:form id="outputDiagramForm">
            <script>
                  var updateD3 = function() {

                	force.stop();
                	
                	svg.selectAll(".node").remove();
                	svg.selectAll(".link").remove();
                	  
                    var graph = #{diagram.json};
                    var nodeLabels = ('#{diagram.nodeLabels}' != 'HIDE');
                    var nodeLabelsHover = ('#{diagram.nodeLabels}' == 'HOVER');
                    var edgeLabels = ('#{diagram.edgeLabels}' != 'HIDE');
                    var edgeLabelsHover = ('#{diagram.edgeLabels}' == 'HOVER');
                    var hideEdges = #{diagram.edges};
                    var higherAccuracy = #{diagram.accuracy};
                    var repel = #{diagram.repel};
                    
                 
					
                    if(higherAccuracy) {
                        force.linkStrength(
                                  function(d) {
                                      if(!d.priority) {
                                          return 0.2;
                                      } else {
                                          return 1.0;
                                      };
                                  })
                    } else {
                    	force.linkStrength(1);
                    }
					
                    jQuery.each(graph.nodes, function(i, v) {
                      if (v.focus == true) {
                        v.fixed = true;
                        v.x = force.size()[0]/2;
                        v.y = force.size()[1]/2;
                      } else {
                    	  v.fixed = false;
                      }
                    });
					
					force.nodes(graph.nodes).links(graph.links);
                    
                    
					
                    var link = svg.selectAll(".link").data(graph.links);
                    link.enter()
                        .append("path")
                        .attr("class", "link")
                        .attr('id', function(d,i) {return 'edgepath'+i})
                        .attr("d", d3.svg.diagonal())
                        
                        .style("stroke", function(d) {
                          if (d.priority) {
                            return "#ff7f0e";
                          } else {
                          	return "#1f77b4";
                            
                          }
                        });
                    
                    svg.selectAll(".link")
                      .style("stroke", function(d) {
                        if (d.priority) {
                            return "#ff7f0e";
                          } else {
                              return "#e1eff6";
                          }
                        }
                      );
                    
                    link
                      .attr('visibility', function(d,i) {
                        if(hideEdges) {
                            if(!d.priority) {
                                return "hidden";
                            }
                            
                        }
                        return null;
                       
                    })
                    
                    link.exit().remove();
                    
                    if(edgeLabelsHover) {
                        link
                          .on("mouseover", function(d) { d3.select(this).select("text").style('visibility', null); } )
                          .on("mouseout", function(d) { d3.select(this).select("text").style('visibility', 'none'); } );
                      }
					
                    var weightFormatter = d3.format("%");
                    
                    var tpath = svg.selectAll(".linkTextPath").data(graph.links);
                    tpath.enter()
                        .append("text")
                        .attr("class", "linklabel")
                        .append("textPath")
                        .attr('xlink:href',function(d,i) {return '#edgepath'+i})
                        .attr("class", "linkTextPath")
                        .attr("startOffset", "50%")
                        .attr("dy", 3)
                        
                        .text(function(d) { return weightFormatter(d.weight); })
                        
                   if(edgeLabels) {
                	 tpath.style('visibility', function(d,i) {
                           if(hideEdges) {
                               if(!d.priority) {
                                   return 'hidden';
                               }
                           }
                           return null;})
                   } else {
                	 tpath.style('visibility', 'hidden');
                   }

                   tpath.exit().remove();
					
					var node = svg.selectAll(".node")
                      .data(graph.nodes)
					
                    node.enter()
	                  .append("g")
	                  .attr("class", "node")
	                  .on("click", function(d) {
	                	  d3.selectAll(".selectedclass")
	                    	  .style("display", "none");
	                	  d3.select(this).select(".selectedclass").style("display",null);
                        selectNode([ {name : 'nodeURI', value : d.uri} ])
                      });
                    
                    if(nodeLabelsHover) {
                      node
                        .on("mouseover", function(d) { d3.select(this).select("text").style('display', null); } )
                        .on("mouseout", function(d) { d3.select(this).select("text").style('display', 'none'); } );
                    }
                    
                    node.append("circle")
                    .attr("r", 5)
                    .style("fill", function(d) {
                      if (d.focus) {
                        return "#ff7f0e";
                      } else {
                        return "#1f77b4";
                      }
                    });
                    
                    node.append("circle")
                    .attr("r",8)
                    .attr("class", "selectedclass")
                    .style("fill", "none")
                    .style("stroke", function(d) {
                        if (d.focus) {
                            return "#ff7f0e";
                          } else {
                            return "#1f77b4";
                          }
                        })
                    .style("display", function(d) {
                        if (d.selection) {
                            return null;
                          } else {
                            return "none";
                          }
                        });
                      
                    
                    

                      
                    node.exit().remove();

					  function moveto (d) {
						return "M"+d.source.x+","+d.source.y;
					  };

					  function lineto (d) {
						return " L"+d.target.x+","+d.target.y;
					  }; 
					  
					  
					  var text = node.append("text")
                        .attr("class", "nodelabel")
                        .attr("x", 5)
                        .attr("dy", ".35em")
                        .text(function(d) { return d.label; })
                      if(nodeLabelsHover || !nodeLabels) {
                        text.style('display', 'none');
                      }

					  force.on("tick", function() {
						link.attr("d",  function(d) { return moveto(d) + lineto(d); }); 
						tpath.attr("d",  function(d) { return moveto(d) + lineto(d); }); 
						node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
					  });
					  
					  force.start();
					};
					
				</script>
          </h:form>
          <!--</p:tab>


            <p:tab title="Result Table">
              <h:form id="outputTableForm">
                <p:dataTable id="outputTable" var="entry"
                  value="#{result.queryResultList}" rowKey="#{entry}"
                  selection="#{result.rowSelection}"
                  selectionMode="single" style="table-layout:fixed"
                  resizableColumns="true">

                  <p:ajax event="rowSelect"
                    update=":nodeDetailForm:nodeDetailTable" />
                  <p:ajax event="rowUnselect"
                    update=":nodeDetailForm:nodeDetailTable" />


                  <p:column headerText="Source">
                    <h:outputText value="#{entry.nodes[0].label}"
                      style="word-wrap: break-word;" />
                  </p:column>
                  <p:column headerText="Target">
                    <h:outputText value="#{entry.nodes[1].label}"
                      style="word-wrap: break-word;" />
                  </p:column>
                  <p:column headerText="Weight" sortBy="#{entry.weight}">
                    <h:outputText value="#{entry.weight}" />
                  </p:column>
                </p:dataTable>
              </h:form>
            </p:tab>
          </p:accordionPanel> -->

        </p:layoutUnit>

        <p:layoutUnit id="detailLayoutUnit" position="south" size="300"
          header="Node Details:" resizable="true" collapsible="true"
          collapsed="false">

          <h:form id="nodeDetailForm">
            <h:outputLink id="selectionLabel" value="#{result.selection.URI}" target="_blank">
              <h:outputText style="font: 20pt sans-serif;"
                value="#{result.selectionLabel}" id="selectionLabelText" />
            </h:outputLink>

            <h:outputLink id="selectionRDF" value="#{result.selectionRDF}" target="_blank" style="padding-left:8px;visibility:#{ (result.selectionRDF=='') ? 'hidden' : 'visible'}">
              <h:outputText style="font: 10pt sans-serif;"
                value="(rdf)" id="selectionRDFText" />
            </h:outputLink>
            
            <p:dataTable id="nodeDetailTable" var="entry"
              value="#{result.selectionStrings}" rowKey="#{entry.key}"
              style="table-layout:fixed" resizableColumns="true">

              <p:column headerText="Property">
                <h:outputText value="#{entry.key}"
                  style="word-wrap: break-word;" />
              </p:column>
              <p:column headerText="Value(s)">
                <h:outputText value="#{entry.value}"
                  style="word-wrap: break-word;" />
              </p:column>
            </p:dataTable>

          </h:form>
        </p:layoutUnit>

      </p:layout>

    </p:layoutUnit>

    <p:layoutUnit id="diagramSettingsLayoutUnit" position="east"
      size="350" header="Diagram Settings" resizable="true"
      closable="false" collapsed="true" collapsible="true">


      <h:form id="settingsForm">
        <h:panelGrid columns="2" style="margin-bottom:10px"
          cellpadding="5">

          <h:outputText value="Show Node Labels: " />
          <p:selectOneMenu value="#{diagram.nodeLabels}"
            converter="#{diagramConverter}">
            <f:selectItems value="#{diagram.labelModes}" var="mode"
              itemLabel="#{mode}" itemValue="#{mode}" />
          </p:selectOneMenu>


          
          <h:outputText value="Show main edges only: " />
          <p:selectBooleanCheckbox value="#{diagram.edges}" />
          
          
          <h:outputText value="Increase accuracy for most similar paths: " />
          <p:selectBooleanCheckbox value="#{diagram.accuracy}" />
          
          
          <h:outputText value="Unconnected nodes repel each other: " />
          <p:selectBooleanCheckbox value="#{diagram.repel}" />
          

          <p:commandButton value="Update"
            update="@form :outputDiagramForm" id="updateDisplayButton"
            oncomplete="updateD3()" actionListener="#{diagram.update}" />
        </h:panelGrid>

      </h:form>

    </p:layoutUnit>

  </p:layout>

  <p:ajaxStatus
    style="width:64px;height:64px;position:fixed;right:5px;bottom:5px">
    <f:facet name="start">
      <p:graphicImage library="images" name="loading.gif" />
    </f:facet>

    <f:facet name="complete">
      <h:outputText value="" />
    </f:facet>
  </p:ajaxStatus>

</h:body>
</html>